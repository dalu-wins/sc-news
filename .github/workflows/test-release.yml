name: Manual Release

on:
  workflow_dispatch:

jobs:
  release:
    name: Determine Version, Build APK & Release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # 1Ô∏è‚É£ Checkout
      - name: Checkout repository
        uses: actions/checkout@v5

      # 2Ô∏è‚É£ Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # 3Ô∏è‚É£ Install semantic-release + Plugins
      - name: Install semantic-release
        run: npm install -g semantic-release @semantic-release/git @semantic-release/changelog @semantic-release/github @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/npm

      # 4Ô∏è‚É£ Dry-run ‚Üí n√§chste Version ermitteln
      - name: Determine next release version
        id: semver
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release --dry-run --branches master > output.log
          VERSION=$(grep "The next release version is" output.log | awk '{print $6}')
          echo "nextRelease=$VERSION" >> $GITHUB_OUTPUT
          echo "Next release version: $VERSION"

      # 5Ô∏è‚É£ Update package.json version
      - name: Set version in package.json
        run: |
          VERSION=${{ steps.semver.outputs.nextRelease }}
          echo "Setting package.json version to $VERSION"
          # package.json direkt aktualisieren
          node -e "let pkg=require('./package.json'); pkg.version='$VERSION'; require('fs').writeFileSync('package.json', JSON.stringify(pkg,null,2));"

      # 6Ô∏è‚É£ Setup JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: 17

      # 7Ô∏è‚É£ Gradle Cache
      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 8Ô∏è‚É£ Run Unit Tests
      - name: Run Unit Tests
        run: ./gradlew testDebugUnitTest --stacktrace

      # 9Ô∏è‚É£ Decode Keystore
      - name: Decode Keystore
        run: echo "${{ secrets.APP_KEYSTORE_B64 }}" | base64 --decode > app/keystore.jks

      # üîü Build APK ‚Üí versionName kommt aus package.json
      - name: Build Release APK
        env:
          APP_KEYSTORE_PASSWORD: ${{ secrets.APP_KEYSTORE_PASSWORD }}
          APP_KEY_ALIAS: ${{ secrets.APP_KEY_ALIAS }}
          APP_KEY_PASSWORD: ${{ secrets.APP_KEY_PASSWORD }}
        run: ./gradlew assembleRelease

      # 1Ô∏è‚É£1Ô∏è‚É£ Run semantic-release for real ‚Üí creates tag, release & changelog
      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release --branches master --ci false
